<?php

declare(strict_types=1);

use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use ReflectionClass;
use Volcanic\Attributes\Route;
use Volcanic\Services\RouteDiscoveryService;

// Test controller class
class TestRouteController extends Controller
{
    #[Route(
        methods: ['GET'],
        uri: '/test-index',
        name: 'test.index',
        middleware: ['auth']
    )]
    public function index(Request $request): JsonResponse
    {
        return response()->json(['method' => 'index']);
    }

    #[Route(
        methods: ['GET'],
        uri: '/test-show/{id}',
        name: 'test.show',
        where: ['id' => '[0-9]+']
    )]
    public function show(Request $request, int $id): JsonResponse
    {
        return response()->json(['method' => 'show', 'id' => $id]);
    }

    #[Route(
        methods: ['POST'],
        uri: '/test-store',
        name: 'test.store'
    )]
    public function store(Request $request): JsonResponse
    {
        return response()->json(['method' => 'store']);
    }

    #[Route(methods: ['GET'])] // No URI or name specified
    public function autoGenerated(): JsonResponse
    {
        return response()->json(['method' => 'auto']);
    }

    public function methodWithoutAttribute(): JsonResponse
    {
        return response()->json(['method' => 'no-attribute']);
    }
}

describe('RouteDiscoveryService', function (): void {
    it('can discover methods with route attributes', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('getMethodsWithRouteAttributes');
        $method->setAccessible(true);

        $methods = $method->invoke($routeDiscovery, TestRouteController::class);

        expect($methods)->toHaveCount(4); // index, show, store, autoGenerated
        expect($methods)->toHaveKeys(['index', 'show', 'store', 'autoGenerated']);

        // Check that each method has the correct attribute
        expect($methods['index']['attribute'])->toBeInstanceOf(Route::class);
        expect($methods['show']['attribute'])->toBeInstanceOf(Route::class);
        expect($methods['store']['attribute'])->toBeInstanceOf(Route::class);
        expect($methods['autoGenerated']['attribute'])->toBeInstanceOf(Route::class);
    });

    it('ignores methods without route attributes', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('getMethodsWithRouteAttributes');
        $method->setAccessible(true);

        $methods = $method->invoke($routeDiscovery, TestRouteController::class);

        expect($methods)->not->toHaveKey('methodWithoutAttribute');
    });

    it('can generate default URIs correctly', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('generateDefaultUri');
        $method->setAccessible(true);

        $uri = $method->invoke($routeDiscovery, TestRouteController::class, 'index');
        expect($uri)->toBe('test-route/index');

        $uri = $method->invoke($routeDiscovery, TestRouteController::class, 'autoGenerated');
        expect($uri)->toBe('test-route/auto-generated');
    });

    it('can generate default route names correctly', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('generateDefaultRouteName');
        $method->setAccessible(true);

        $name = $method->invoke($routeDiscovery, TestRouteController::class, 'index');
        expect($name)->toBe('test-route.index');

        $name = $method->invoke($routeDiscovery, TestRouteController::class, 'autoGenerated');
        expect($name)->toBe('test-route.auto-generated');
    });

    it('can build URIs correctly', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('buildUri');
        $method->setAccessible(true);

        // Test with explicit URI
        $routeWithUri = new Route(uri: '/api/products');
        $uri = $method->invoke($routeDiscovery, $routeWithUri, TestRouteController::class, 'index');
        expect($uri)->toBe('/api/products');

        // Test with null URI (should generate default)
        $routeWithoutUri = new Route;
        $uri = $method->invoke($routeDiscovery, $routeWithoutUri, TestRouteController::class, 'index');
        expect($uri)->toBe('test-route/index');
    });

    it('can extract class name from file', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Create a temporary PHP file
        $tempFile = tempnam(sys_get_temp_dir(), 'test_controller');
        file_put_contents($tempFile, '<?php
namespace App\\Http\\Controllers;

class TempController
{
    public function index() {}
}
');

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('getClassNameFromFile');
        $method->setAccessible(true);

        $className = $method->invoke($routeDiscovery, $tempFile);

        expect($className)->toBe('App\\Http\\Controllers\\TempController');

        // Clean up
        unlink($tempFile);
    });

    it('handles file without namespace correctly', function (): void {
        $routeDiscovery = new RouteDiscoveryService;

        // Create a temporary PHP file without namespace
        $tempFile = tempnam(sys_get_temp_dir(), 'test_controller');
        file_put_contents($tempFile, '<?php
class TempController
{
    public function index() {}
}
');

        // Use reflection to access the private method for testing
        $reflection = new ReflectionClass($routeDiscovery);
        $method = $reflection->getMethod('getClassNameFromFile');
        $method->setAccessible(true);

        $className = $method->invoke($routeDiscovery, $tempFile);

        expect($className)->toBeNull();

        // Clean up
        unlink($tempFile);
    });
});
